ArrayList<Node> list = new ArrayList<Node>();
ArrayList<Edge> edgeList = new ArrayList<Edge>();
Edge tempEdge = null; // An edge just meant represent a new edge until the edge is committed to nodes.
Node tempNode = null;
Node selectedNode = null;
void setup (){
    size(640,640);
    background(255);
    //noStroke();
}

void draw (){
    background(255);
    fill(255);

    for (Node x: list){
        strokeWeight(3);
        x.displayEdge();
    }

    for (Node x: list){
        strokeWeight(0);
        x.display();
    }

    if (tempEdge != null){
        strokeWeight(1);
        tempEdge.display();
    }
}

void mouseClicked(){
    for (Node node: list){

        float centerX = node.getCenterX(), centerY = node.getCenterY();

        float distance = sqrt(pow((centerX-mouseX), 2) + pow((centerY-mouseY), 2));
        if (distance < node.getRadius()){
            node.setFill(186,245,68);
            return;
        }
    }

    list.add(new Node(mouseX, mouseY));
}

void mousePressed(){
    if (mouseButton == LEFT){
        for (Node node: list){
            if (node.clicked(mouseX, mouseY)){
                node.setFill(186,245,68);
                
                if(tempEdge == null)
                    tempEdge = new Edge(mouseX, mouseY, mouseX, mouseY);

                return;
            }
        }
    }
cccccccccccccccccccc
        if (key == CODED){
            if (keyCode == CONTROL){
                if (node.clicked(mouseX, mouseY)){
                node.setFill(25,245,68);
                
                selectedNode = node;

                return;
            }
            }
        }
        for(Node node: list){
            
            if (node.clicked(mouseX, mouseY)){
                node.setFill(255,245,68);
                
                tempNode = node;

                return;
            }
        }
    }
    

    
}

void mouseDragged() {
    if (tempEdge != null){
        tempEdge.setPosTwo(mouseX, mouseY);
    }
    else if (tempNode != null){
        tempNode.setPosition((float)mouseX, (float)mouseY);
    }
    
}

void mouseReleased() {
    
    if(tempNode != null){
        tempNode = null;
        return;
    }
    else if (tempEdge == null){
        return;
    }

    Node head = null, tail = null;

    for (Node node: list){
        float centerX = node.getCenterX(), centerY = node.getCenterY();
        float distance = sqrt(pow((centerX-tempEdge.getPosOne()[0]), 2) + pow((centerY-tempEdge.getPosOne()[1]), 2));
        if (distance < node.getRadius()){
            head = node;
        }
        
        distance = sqrt(pow((centerX-tempEdge.getPosTwo()[0]), 2) + pow((centerY-tempEdge.getPosTwo()[1]), 2));
        if (distance < node.getRadius()){
            tail = node;
        }

        if (head != null && tail != null){
            break;
        }
    }

    if (head != null && tail != null){
        
        tempEdge.setEndPoints(head, tail);

        head.addEdge(tempEdge);
        tail.addEdge(tempEdge);

        tempEdge.update();
    }
    tempEdge = null;
}
